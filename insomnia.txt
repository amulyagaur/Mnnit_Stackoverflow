TRIE:: _______________
struct trie{
    int word,prefix;
    trie* child[26];
    trie()
    {
        word=0;
        prefix=0;
        for(int i=0;i<26;i++)
        {
            child[i]=NULL;
        }
    }
};
int count_prefix(trie* root,string &str)
{
    trie* ptr = root;
    for(int i=0;i<str.size();i++)
    {
        int index = str[i]-'a';
        if(ptr->child[index]==NULL)
            return 0;
        ptr=ptr->child[index];
    }
    return ptr->prefix;
}
int count_word(trie* root,string &str)
{
    trie* ptr= root;
    for(int i=0;i<str.size();i++)
    {
        int index = str[i]-'a';
        if(ptr->child[index]==NULL)
            return 0;
        ptr=ptr->child[index];
    }
    return ptr->word;
}________

struct trie{
	int val;
	trie* child[2];
	trie()
	{
		val=0;
		child[0]=nullptr;
		child[1]=nullptr;
	}
};
void insert(trie* root,int key)
{
	trie* ptr=root;
	for(int i=31;i>=0;i--)
	{
		bool bb = (key & (1<<i));
		if(ptr->child[bb]==nullptr)
		ptr->child[bb]= new trie();
		ptr=ptr->child[bb];
	}	
	ptr->val=key;
}
int find_max(trie* root,int k)
{
	trie* ptr=root;
	for(int i=31;i>=0;i--)
	{
		bool bb = (k & (1<<i));
		if(bb==1)
		{
			if(ptr->child[0]==NULL)
			ptr=ptr->child[1];
			else
			ptr=ptr->child[0];
		}
		else
		{
			if(ptr->child[1]==NULL)
			ptr=ptr->child[0];
			else
			ptr=ptr->child[1];
		}
	}
	return ( (ptr->val) ^ k);
}
int find(int *a,int n,trie* root)
{
	int ans=INT_MIN;
	insert(root,a[0]);
	for(int i=0;i<n;i++)
	{
		ans=max(ans,find_max(root,a[i]));
		insert(root,a[i]);
	}
	return ans;
}_______________________________

LUCAS THEorem:_______________
#include <bits/stdc++.h>
using namespace std;
long long fact[1000009];
const long long int MOD = 1000003;
long long res[1000006],sum[1000006];
vector<long long int> getRepresentation(long long int N) {
    vector<long long int> res;
    while (N > 0) {
        res.push_back(N % MOD);
        N /= MOD;
    }
    return res;
}
long long power_mod(long long a,long long n)
{
	if(n==0)
		return 1;
	long long int ans = power_mod(a,n/2);
	ans = (ans%MOD * ans%MOD)%MOD;
	if(n%2==1)
		ans = (ans%MOD * a%MOD)%MOD;
	return ans;
}
long long C(long long n,long long r)
{
    if(n<r)
        return 0LL;
    return (fact[n]%MOD * (power_mod(fact[r],MOD-2)%MOD * power_mod(fact[n-r],MOD-2)%MOD)%MOD)%MOD ;
}
long long ncr(long long n,long long r)
{
    vector<long long int> nv = getRepresentation(n);
    vector<long long int> rv = getRepresentation(r);        
    long long res = 1;
    for (int i = 0; i < rv.size(); ++i) 
    {
        res = (res%MOD * C(nv[i], rv[i])) % MOD;
    }   
    return res;
}
int main()
{
    fact[0]=1;
    for(long long i=1;i<=1000008;i++)
        fact[i]=(fact[i-1]%MOD * i%MOD)%MOD;
       
    int t;
    scanf("%d",&t);
    while(t--)
    {
    	long long n;
    	int q;
    	scanf("%lld %d",&n,&q);
    	int lim = min(n,1000000LL);
    	for(long long i =2;i<=lim;i++)
    	{
    		res[i] = (ncr(n,i)%MOD*ncr(i,2LL)%MOD)%MOD;
    	}
    	sum[0]=0;
    	sum[1]=0;
    	sum[2]=res[2];
    	for(int i=3;i<=lim;i++)
    	{
    		sum[i]=(sum[i-1]%MOD+res[i]%MOD)%MOD;
    	}
    	while(q--)
    	{
    		int l,r;
    		scanf("%d %d",&l,&r);
    		printf("%lld\n",(sum[r]-sum[l-1]+MOD)%MOD);
    	}
    }
    return 0;
}
_____________________________________________

PBDS::_______________________________________
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef tree< pair<int,int>, null_type, less< pair<int,int> >, rb_tree_tag, tree_order_statistics_node_update> pbds;

int main()
{

	//K-th smallest
	//int k = 3;
	//cout << k << "rd smallest: " << *A.find_by_order(k-1) << endl;


	//cout << "No of elements less than " << X << " are " << A.order_of_key(X) << endl;

	for(int i=0;i<A.size();i++)
	{
		auto it= A.find_by_order(i);
		cout<<(*it).first<<" "<<(*it).second<<endl;
	}
	return 0;
}
_____________________________________________________

Z Algorithm _____________________________________________
int z[100005];
void Zfunction(string &s)
{
    int n=s.size();
    int L = 0, R = 0;
    for (int i = 1; i < n; i++)
    {
        if (i > R) 
        {
            L = R = i;
            while (R < n && s[R-L] == s[R]) R++;
                z[i] = R-L; R--;
        }
        else
        {
            int k = i-L;
            if (z[k] < R-i+1) z[i] = z[k];
            else 
            {
                L = i;
                while (R < n && s[R-L] == s[R]) R++;
                z[i] = R-L; R--;
            }
        }
    }
    for(int i=0;i<n;i++)
    cout<<z[i]<<" ";
    cout<<endl;
    return;
}

_____________________________________________________
MO's Comp:

bool cmp(const pair< pair<int,int>,int> &a,const pair< pair<int,int>,int> &b)
{
    int l1 = a.first.first/BLOCK;
    int l2 = b.first.first/BLOCK;
    if(l1 != l2)
        return (l1<l2);
    return l1%2 ? (a.first.second < b.first.second) : (a.first.second > b.first.second);
}
_____________________________________________________

IN-OUT-DP:::::::_______________________________________

#include <bits/stdc++.h>
using namespace std;
#define endl '\n'
int n;
vector< vector<int> > adj(100001);
int in[100005],out[100005],dp[100005];
void dfs_in(int u,int par)
{
	in[u]=0;
	for(int i=0;i<adj[u].size();i++)
	{
		if(adj[u][i]==par)
			continue;
		dfs_in(adj[u][i],u);
		in[u]=max(in[u],1+in[adj[u][i]]);
	}
}
void dfs_out(int u,int par)
{
	int mx1=-1,mx2=-1;
	for(int i=0;i<adj[u].size();i++)
	{
		if(adj[u][i]==par)
			continue;
		if(in[adj[u][i]] >= mx1)
		{
			mx2=mx1;
			mx1 = in[adj[u][i]];
		}
		else
			if(in[adj[u][i]]>mx2)
				mx2=in[adj[u][i]];
	}
	for(int i=0;i<adj[u].size();i++)
	{
		if(adj[u][i]==par)
			continue;
		int use = mx1;
		if(in[adj[u][i]]==mx1)
			use = mx2;
		out[adj[u][i]]= max(1+out[u],2+use);
		dfs_out(adj[u][i],u);
	}
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin>>n;
    for(int i=1;i<n;i++)
    {
    	int x,y;
    	cin>>x>>y;
    	adj[x].push_back(y);
    	adj[y].push_back(x);
    }
    dfs_in(1,0);
    dfs_out(1,0);
    int dia=-1;
    for(int i=1;i<=n;i++)
    {
    	cout<<max(in[i],out[i])<<" ";
    	dia = max(dia,in[i]+out[i]);
    }
    cout<<"Diameter of tree is :"<<dia<<endl;
    return 0;
}
____________________________________________________

LCA::::::::::::::::::_______________________________________
int a[N], lvl[N], P[N][LG];

void dfs(int u, int par)
{
    lvl[u] = 1+lvl[par];
    P[u][0] = par;

	for(int v:g[u])
    {
		if (v == par) continue;
		dfs(v, u);
	}
}

int lca(int u, int v)
{
    int i, lg;
    if (lvl[u] < lvl[v]) swap(u, v);

    for(lg = 0; (1<<lg) <= lvl[u]; lg++);
    lg--;

    for(i=lg; i>=0; i--){
        if ( lvl[u] - (1<<i) >= lvl[v])
            u = P[u][i];
    }

    if (u == v) 
    	return u;

    for(i=lg; i>=0; i--)
    {
        if (P[u][i] != -1 and P[u][i] != P[v][i])
            u = P[u][i], v = P[v][i];
    }
    return P[u][0];
}

//Get the ancestor of node "u"
//which is "dis" distance above.
int getAncestor(int u, int dis)
{
    dis = lvl[u] - dis;
    int i, lg = 0;
    for(; (1<<lg) <= lvl[u]; lg++); lg--;

    for(i=lg; i>=0; i--){
        if (lvl[u] - (1<<i) >= dis)
            u = P[u][i];
    }

    return u;
}

//returns the distance between
//two nodes "u" and "v".
int dis(int u, int v){
    if (lvl[u] < lvl[v]) swap(u, v);
    int w = lca(u, v);
    return lvl[u] + lvl[v] - 2*lvl[w];
}
________________________________________________________
String hashing::::::::::::::::::::::::::::::::::::::::

/**
 *calculate the hash of string S
 */
long long getHash(const string s) {
	long long h = 0; // hash of the string
	int length = s.size();
	for (int i = length-1; i >= 0; i--) {
		h *= B;
		h += (s[i] - 'a' + 1);
		h %= M;
	}
	return h;
}

void pInit() {
    pB[0] = 1;
    for (int i = 1; i < MAX; i++) {
        pB[i] = (pB[i-1] * B) % M;
    }

    invB[MAX-1] = power(pB[MAX-1], M-2);
    for (int i = MAX-2; i >= 0; i--) {
        invB[i] = (invB[i+1] * B) % M;
    }
}

bool find(const string &T, const string &P)
{
	int n = T.size();
	int m = P.size();
        // generates hash for P[0, m-1]
	long long h = getHash(P);
        // generates hash of T[0, m-1]
	long long g = getHash(T.substr(0, m));
	if (g == h) {
		//if both identifiers are equal, shift are equal
		return true;
	}
        else {
		for (int i = m, j = 0; i < n; i++, j++) {
			//generate hash for new shift T[j+1, i];
			//remove the j th character
			g += (M - (T[j] - 'a' + 1));
			g *= invB;
			g %= M;

			//insert the i th character
			g += (T[i] - 'a' + 1) * power_mod(B, m-1);
			g %= M;
			if (g == h) {
                 //if identifiers are equal
				return true;
			}
		}
         }
	return false;
}


/**
*calculate the hash of string S[0..i] and reverse(S[i..n-1]) for every i
*/
void init() {
	h[0] = s[0];
	for (int i = 1; i < n; i++)
		h[i] = ((s[i] * pB[i]) % M + h[i-1]) % M;
	rh[n-1] = s[n-1];
	for (int i = n-2; i >= 0; i--)
		rh[i] = ((s[i] * pB[n-1-i]) % M + rh[i+1]) % M;
}

/**
*@return {number} forward hash of string S[i..j]
*@param {number} i, j: range for which hash is calculated
*/
long long getSubHash(int i, int j){
	long long jh = h[j]; // hash for S[0..j]
	long long ih = (i > 0)? h[i-1]: 0; // hash for S[0..i-1]
	long long subhash = ((jh + M - ih) * invB[i]) % M;
	return subhash; // hash for S[i..j]
}

/**
*@return {number} reverse hash of string S[i..j]
*@param {number} i, j: range for which reverse hash is calculated
*/
long long getSubRH(int i, int j){
	long long ih = rh[i]; // hash for reverse S[i..n-1]
	long long jh = (j < n-1)? rh[j+1]: 0; // hash for reverse S[j+1..n-1]
	long long subhash = ((ih + M - jh) * invB[n-1-j]) % M;
	return subhash; // hash for reverse S[i..j]
}
___________________________________________________________

DIGIT DP:::::::::::::::::::::::::::::::::::::::::::::::

int D;
int dp[10][2][50][50];
int solve(int index,int flag,int e,int o)
{
    //cout<<index<<" "<<flag<<" "<<e<<" "<<o<<endl;
    if(index==D)
    {
        if( (e-o) ==1)
        return 1;
        return 0;
    }
    if(dp[index][flag][e][o] != -1)
    return dp[index][flag][e][o];
    int ans=0;
    if(flag==0)
    {
        for(int i=0;i<=9;i++)
        {
            if((D-index)%2==0)
            ans+= solve(index+1,0,e+i,o);
            else
            ans+= solve(index+1,0,e,o+i);
        }
    }
    else
    {
        for(int i=0;i<=((x[index]-48)-1);i++)
        {
            if((D-index)%2==0)
            ans+= solve(index+1,0,e+i,o);
            else
            ans+= solve(index+1,0,e,o+i);
        }
        if((D-index)%2==0)
            ans+= solve(index+1,1,e+(x[index]-48),o);
        else
            ans+= solve(index+1,1,e,o+(x[index]-48));
    }
    dp[index][flag][e][o]=ans;
    return ans;
}

___________________________________________________________

SACK:::::::::::::::::::::::::

int dfs(int u,int par)
{
    int mx=-1,mv=-1,v;
    for(int i=0;i<g[u].size();i++)
    {
        v= g[u][i];
        if(v==par)
            continue;
        int sz = dfs(v,u);
        if(sz>mx)
        {
            mx=sz;
            mv=v;
        }
    }
    if(mx!=-1)
    {
        s[u]=s[mv];   
    }
    else
    {
        s[u] = new set<int>();
    }
    (*s[u]).insert(color[u]);


    for(int i=0;i<g[u].size();i++)
    {
        v= g[u][i];
        if(v==par)
        continue;

        if(v!= mv && v!= par)
        {
            for(auto it=(*s[v]).begin();it!= (*s[v]).end();it++)
            {
                (*s[u]).insert(*it);
            }
        }
    }
    return size_tree[u]=(int)(*s[u]).size();
}
_____________________________________________________

HLD
​​ 
​​https://blog.anudeep2011.com/heavy-light-decomposition/
​​ 
​​You are given a tree (an acyclic undirected connected graph) with N nodes, and edges numbered 1, 2, 3...N-1.
​​We will ask you to perform some instructions of the following form:
​​CHANGE i ti : change the cost of the i-th edge to ti
​​or
​​QUERY a b : ask for the maximum edge cost on the path from node a to node 
​​ 
​​#include <cstdio>
​​#include <vector>
​​using namespace std;
​​
​​#define root 0
​​#define N 10100
​​#define LN 14
​​
​​vector <int> adj[N], costs[N], indexx[N];
​​int baseArray[N], ptr;
​​int chainNo, chainInd[N], chainHead[N], posInBase[N];
​​int depth[N], pa[LN][N], otherEnd[N], subsize[N];
​​int st[N*6], qt[N*6];
​​
​​/*
​​ * make_tree:
​​ * Used to construct the segment tree. It uses the baseArray for construction
​​ */
​​void make_tree(int cur, int s, int e) {
​​        if(s == e-1) {
​​                st[cur] = baseArray[s];
​​                return;
​​        }
​​        int c1 = (cur<<1), c2 = c1 | 1, m = (s+e)>>1;
​​        make_tree(c1, s, m);
​​        make_tree(c2, m, e);
​​        st[cur] = st[c1] > st[c2] ? st[c1] : st[c2];
​​}
​​
​​/*
​​ * update_tree:
​​ * Point update. Update a single element of the segment tree.
​​ */
​​void update_tree(int cur, int s, int e, int x, int val) {
​​        if(s > x || e <= x) return;
​​        if(s == x && s == e-1) {
​​                st[cur] = val;
​​                return;
​​        }
​​        int c1 = (cur<<1), c2 = c1 | 1, m = (s+e)>>1;
​​        update_tree(c1, s, m, x, val);
​​        update_tree(c2, m, e, x, val);
​​        st[cur] = st[c1] > st[c2] ? st[c1] : st[c2];
​​}
​​
​​/*
​​ * query_tree:
​​ * Given S and E, it will return the maximum value in the range [S,E)
​​ */
​​void query_tree(int cur, int s, int e, int S, int E) {
​​        if(s >= E || e <= S) {
​​                qt[cur] = -1;
​​                return;
​​        }
​​        if(s >= S && e <= E) {
​​                qt[cur] = st[cur];
​​                return;
​​        }
​​        int c1 = (cur<<1), c2 = c1 | 1, m = (s+e)>>1;
​​        query_tree(c1, s, m, S, E);
​​        query_tree(c2, m, e, S, E);
​​        qt[cur] = qt[c1] > qt[c2] ? qt[c1] : qt[c2];
​​}
​​
​​/*
​​ * query_up:
​​ * It takes two nodes u and v, condition is that v is an ancestor of u
​​ * We query the chain in which u is present till chain head, then move to next chain up
​​ * We do that way till u and v are in the same chain, we query for that part of chain and break
​​ */
​​
​​int query_up(int u, int v) {
​​        if(u == v) return 0; // Trivial
​​        int uchain, vchain = chainInd[v], ans = -1;
​​        // uchain and vchain are chain numbers of u and v
​​        while(1) {
​​                uchain = chainInd[u];
​​                if(uchain == vchain) {
​​                        // Both u and v are in the same chain, so we need to query from u to v, update answer and break.
​​                        // We break because we came from u up till v, we are done
​​                        if(u==v) break;
​​                        query_tree(1, 0, ptr, posInBase[v]+1, posInBase[u]+1);
​​                        // Above is call to segment tree query function
​​                        if(qt[1] > ans) ans = qt[1]; // Update answer
​​                        break;
​​                }
​​                query_tree(1, 0, ptr, posInBase[chainHead[uchain]], posInBase[u]+1);
​​                // Above is call to segment tree query function. We do from chainHead of u till u. That is the whole chain from
​​                // start till head. We then update the answer
​​                if(qt[1] > ans) ans = qt[1];
​​                u = chainHead[uchain]; // move u to u's chainHead
​​                u = pa[0][u]; //Then move to its parent, that means we changed chains
​​        }
​​        return ans;
​​}
​​
​​/*
​​ * LCA:
​​ * Takes two nodes u, v and returns Lowest Common Ancestor of u, v
​​ */
​​int LCA(int u, int v) {
​​        if(depth[u] < depth[v]) swap(u,v);
​​        int diff = depth[u] - depth[v];
​​        for(int i=0; i<LN; i++) if( (diff>>i)&1 ) u = pa[i][u];
​​        if(u == v) return u;
​​        for(int i=LN-1; i>=0; i--) if(pa[i][u] != pa[i][v]) {
​​                u = pa[i][u];
​​                v = pa[i][v];
​​        }
​​        return pa[0][u];
​​}
​​
​​void query(int u, int v) {
​​        /*
​​         * We have a query from u to v, we break it into two queries, u to LCA(u,v) and LCA(u,v) to v
​​         */
​​        int lca = LCA(u, v);
​​        int ans = query_up(u, lca); // One part of path
​​        int temp = query_up(v, lca); // another part of path
​​        if(temp > ans) ans = temp; // take the maximum of both paths
​​        printf("%d\n", ans);
​​}
​​
​​/*
​​ * change:
​​ * We just need to find its position in segment tree and update it
​​ */
​​void change(int i, int val) {
​​        int u = otherEnd[i];
​​        update_tree(1, 0, ptr, posInBase[u], val);
​​}
​​
​​/*
​​ * Actual HL-Decomposition part
​​ * Initially all entries of chainHead[] are set to -1.
​​ * So when ever a new chain is started, chain head is correctly assigned.
​​ * As we add a new node to chain, we will note its position in the baseArray.
​​ * In the first for loop we find the child node which has maximum sub-tree size.
​​ * The following if condition is failed for leaf nodes.
​​ * When the if condition passes, we expand the chain to special child.
​​ * In the second for loop we recursively call the function on all normal nodes.
​​ * chainNo++ ensures that we are creating a new chain for each normal child.
​​ */
​​void HLD(int curNode, int cost, int prev) {
​​        if(chainHead[chainNo] == -1) {
​​                chainHead[chainNo] = curNode; // Assign chain head
​​        }
​​        chainInd[curNode] = chainNo;
​​        posInBase[curNode] = ptr; // Position of this node in baseArray which we will use in Segtree
​​        baseArray[ptr++] = cost;
​​
​​        int sc = -1, ncost;
​​        // Loop to find special child
​​        for(int i=0; i<adj[curNode].size(); i++) if(adj[curNode][i] != prev) {
​​                if(sc == -1 || subsize[sc] < subsize[adj[curNode][i]]) {
​​                        sc = adj[curNode][i];
​​                        ncost = costs[curNode][i];
​​                }
​​        }
​​
​​        if(sc != -1) {
​​                // Expand the chain
​​                HLD(sc, ncost, curNode);
​​        }
​​
​​        for(int i=0; i<adj[curNode].size(); i++) if(adj[curNode][i] != prev) {
​​                if(sc != adj[curNode][i]) {
​​                        // New chains at each normal node
​​                        chainNo++;
​​                        HLD(adj[curNode][i], costs[curNode][i], curNode);
​​                }
​​        }
​​}
​​
​​/*
​​ * dfs used to set parent of a node, depth of a node, subtree size of a node
​​ */
​​void dfs(int cur, int prev, int _depth=0) {
​​        pa[0][cur] = prev;
​​        depth[cur] = _depth;
​​        subsize[cur] = 1;
​​        for(int i=0; i<adj[cur].size(); i++)
​​                if(adj[cur][i] != prev) {
​​                        otherEnd[indexx[cur][i]] = adj[cur][i];
​​                        dfs(adj[cur][i], cur, _depth+1);
​​                        subsize[cur] += subsize[adj[cur][i]];
​​                }
​​}
​​
​​int main() {
​​        int t;
​​        scanf("%d ", &t);
​​        while(t--) {
​​                ptr = 0;
​​                int n;
​​                scanf("%d", &n);
​​                // Cleaning step, new test case
​​                for(int i=0; i<n; i++) {
​​                        adj[i].clear();
​​                        costs[i].clear();
​​                        indexx[i].clear();
​​                        chainHead[i] = -1;
​​                        for(int j=0; j<LN; j++) pa[j][i] = -1;
​​                }
​​                for(int i=1; i<n; i++) {
​​                        int u, v, c;
​​                        scanf("%d %d %d", &u, &v, &c);
​​                        u--; v--;
​​                        adj[u].push_back(v);
​​                        costs[u].push_back(c);
​​                        indexx[u].push_back(i-1);
​​                        adj[v].push_back(u);
​​                        costs[v].push_back(c);
​​                        indexx[v].push_back(i-1);
​​                }
​​
​​                chainNo = 0;
​​                dfs(root, -1); // We set up subsize, depth and parent for each node
​​                HLD(root, -1, -1); // We decomposed the tree and created baseArray
​​                make_tree(1, 0, ptr); // We use baseArray and construct the needed segment tree
​​
​​                // Below Dynamic programming code is for LCA.
​​                for(int i=1; i<LN; i++)
​​                        for(int j=0; j<n; j++)
​​                                if(pa[i-1][j] != -1)
​​                                        pa[i][j] = pa[i-1][pa[i-1][j]];
​​
​​                while(1) {
​​                        char s[100];
​​                        scanf("%s", s);
​​                        if(s[0]=='D') {
​​                                break;
​​                        }
​​                        int a, b;
​​                        scanf("%d %d", &a, &b);
​​                        if(s[0]=='Q') {
​​                                query(a-1, b-1);
​​                        } else {
​​                                change(a-1, b);
​​                        }
​​                }
​​        }
​​}