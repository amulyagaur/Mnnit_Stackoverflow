{
  "_from": "msnodesqlv8",
  "_id": "msnodesqlv8@0.6.8",
  "_inBundle": false,
  "_integrity": "sha512-qfPF7RP9bBGujuLWcbY12/f8ly8MuFggaQWtWXjIf/PTtYV40ey5VYrbBJhtFvTOvH47lW2PyV+MApNr1ZZFyA==",
  "_location": "/msnodesqlv8",
  "_nodeVersion": "4.2.3",
  "_npmUser": {
    "email": "sjames8888@gmail.com",
    "name": "timelorduk"
  },
  "_npmVersion": "2.14.7",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "msnodesqlv8",
    "fetchSpec": "latest",
    "name": "msnodesqlv8",
    "raw": "msnodesqlv8",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/msnodesqlv8/-/msnodesqlv8-0.6.8.tgz",
  "_shasum": "cd785f1c5bfeadb78d0229884c339a2956d193be",
  "_spec": "msnodesqlv8",
  "_where": "C:\\Users\\Harsh Pc\\Dropbox\\samadhan",
  "author": {
    "name": "Stephen James"
  },
  "bugs": {
    "url": "https://github.com/TimelordUK/node-sqlserver-v8/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Microsoft"
    },
    {
      "name": "Stephen James"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "Microsoft Driver for Node.js SQL Server compatible with all versions of Node.",
  "devDependencies": {
    "@types/electron": "^1.4.31",
    "@types/node": "^10.5.2",
    "asynquence": "^0.10.2",
    "asynquence-contrib": "^0.28.2",
    "electron": "^2.0.4",
    "minimist": "^1.2.0",
    "mocha": "^5.2.0",
    "standard": "^11.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "7ef7b229b0abf09aeeb847df6eb249626b626669",
    "tarball": "http://registry.npmjs.org/msnodesqlv8/-/msnodesqlv8-0.1.35.tgz"
  },
  "engines": {
    "node": ">=0.12"
  },
  "eslintConfig": {
    "env": {
      "node": true
    }
  },
  "gitHead": "e025462083dd1140eed2519c449bc257482bc61b",
  "homepage": "https://github.com/TimelordUK/node-sqlserver-v8",
  "keywords": [
    "azure",
    "database",
    "microsoft",
    "msnodesql",
    "mssql",
    "node-sqlserver",
    "prepared",
    "procedure",
    "sproc",
    "sql",
    "sqlserver",
    "statements",
    "tds",
    "tvp"
  ],
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "https://github.com/TimelordUK/node-sqlserver-v8/blob/master/LICENSE"
    }
  ],
  "main": "./lib/sql.js",
  "maintainers": [
    {
      "name": "timelorduk",
      "email": "sjames8888@gmail.com"
    }
  ],
  "name": "msnodesqlv8",
  "optionalDependencies": {},
  "os": [
    "win32"
  ],
  "readme": "[![Build status](https://ci.appveyor.com/api/projects/status/7swf644d37pqdmuj/branch/master?svg=true)](https://ci.appveyor.com/project/TimelordUK/node-sqlserver-v8/branch/master) [![npm version](https://badge.fury.io/js/msnodesqlv8.svg)](https://badge.fury.io/js/msnodesqlv8) \r\n[![GitHub stars](https://img.shields.io/github/stars/TimelordUK/node-sqlserver-v8.svg)](https://github.com/TimelordUK/node-sqlserver-v8/stargazers)\r\n[![GitHub issues](https://img.shields.io/github/issues/TimelordUK/node-sqlserver-v8.svg)](https://github.com/TimelordUK/node-sqlserver-v8/issues)\r\n[![npm](https://img.shields.io/npm/dm/msnodesqlv8.svg)]() \r\n[![npm](https://img.shields.io/npm/dy/msnodesqlv8.svg)]()\r\n\r\n# msnodesqlv8\r\n\r\n1. supports input/output parameters.\r\n1. captures return code from stored procedure.\r\n1. will obtain meta data describing parameters.\r\n1. compatibe with Node 4, 5, 6, 7, 8, 9 and 10\r\n1. electron supported.\r\n1. includes 64 bit/ia32 precompiled libraries.\r\n1. npm install with npm install msnodesqlv8\r\n1. bulk table operations insert, delete, update\r\n1. prepared statements\r\n1. table value parameters\r\n\r\n## Node JS support for SQL server \r\n\r\nBased on node-sqlserver, this version will compile in Visual Studio 2015/2017 and is built against the v8 node module API.  Included in the repository are pre compiled binaries for both x64 and x86 targets.\r\n\r\nFunctionally the API should work exactly as the existing library. All versions of node are supported.\r\n\r\n## Installing\r\n\r\nInstall the package from npm:\r\n\r\n```\r\nnpm install msnodesqlv8 --save\r\n```\r\n\r\n## Getting started\r\n\r\nplease see [wiki](https://github.com/TimelordUK/node-sqlserver-v8/wiki) for documentation.\r\n\r\n### JavaScript\r\n\r\nRequire the module, and write a simple program link this:\r\n\r\n```javascript\r\nconst sql = require(\"msnodesqlv8\");\r\n\r\nconst connectionString = \"server=.;Database=Master;Trusted_Connection=Yes;Driver={SQL Server Native Client 11.0}\";\r\nconst query = \"SELECT name FROM sys.databases\";\r\n\r\nsql.query(connectionString, query, (err, rows) => {\r\n    console.log(rows);\r\n});\r\n```\r\n\r\nSee our [JavaScript sample app](samples/javascript) for more details.\r\n\r\n### TypeScript\r\n\r\nTypings are included in the package. Simply import the types you need, and require the module to get started:\r\n\r\n```typescript\r\nimport { SqlClient } from \"msnodesqlv8\";\r\n\r\nconst sql: SqlClient = require(\"msnodesqlv8\");\r\n\r\nconst connectionString = \"server=.;Database=Master;Trusted_Connection=Yes;Driver={SQL Server Native Client 11.0}\";\r\nconst query = \"SELECT name FROM sys.databases\";\r\n\r\nsql.query(connectionString, query, (err, rows) => {\r\n    console.log(rows);\r\n});\r\n```\r\n\r\nSee our [TypeScript sample app](samples/typescript) for more details.\r\n\r\n## Prepared Statements\r\n\r\nIt is now possible to prepare one or more statements which can then be invoked\r\nover and over with different parameters.  There are a few examples in the prepared unit tests.\r\nPlease note that prepared statements must be closed as shown below when they are no longer required.\r\nEach prepared statement utilises server resources so the application should open and close appropriately.\r\n\r\nPrepared Statements can be useful when there is a requirement to run the same SQL with different\r\nparameters many times.  This saves overhead from constantly submitting the same SQL to the server.\r\n```javascript\r\n    function employeePrepare(done) {\r\n\r\n    var query =\r\n        `SELECT [ModifiedDate]\r\n        ,[BusinessEntityID]\r\n        ,[OrganizationNode]\r\n        ,[ModifiedDate]\r\n        FROM [scratch].[dbo].[Employee]\r\n        WHERE BusinessEntityID = ?`;\r\n\r\n    // open connection\r\n    sql.open(connStr, function (err, conn) {\r\n        assert.ifError(err);\r\n        // prepare a statement which can be re-used\r\n        conn.prepare(query, function (e, ps) {\r\n            // called back with a prepared statement\r\n            console.log(ps.getMeta());\r\n            // prepared query meta data avaialble to view\r\n            assert.ifError(err);\r\n            // execute with expected paramater\r\n            ps.preparedQuery([1], function(err, fetched) {\r\n                console.log(fetched);\r\n                // can call again with new parameters.\r\n                // note - free the statement when no longer used,\r\n                // else resources will be leaked.\r\n                ps.free(function() {\r\n                    done();\r\n                })\r\n            });\r\n        });\r\n    });\r\n    }\r\n```\r\n\r\n\r\n## Connect Timeout\r\n\r\nsend in a connect object to pass a timeout to the driver for connect request\r\n```javascript\r\n    function connect_timeout() {\r\n        var co = {\r\n            conn_str : connStr,\r\n            conn_timeout : 2\r\n        };\r\n        var start = new Date().getTime();\r\n        console.log ('connect ' + start);\r\n        sql.open(co, function(err, conn) {\r\n            var end = new Date().getTime();\r\n            var elapsed = end - start;\r\n            console.log ('callback ..... ' + elapsed );\r\n            if (err) {\r\n                console.log(err);\r\n                return;\r\n            }\r\n            var ts = new Date().getTime();\r\n            conn.query(\"declare @v time = ?; select @v as v\", [sql.Time(ts)], function (err, res) {\r\n                assert.ifError(err);\r\n                console.log(res);\r\n            });\r\n        });\r\n```\r\n## Query Timeout\r\n\r\nsend in a query object such as that shown below to set a timeout for a particular query.  Note usual semantics of using a sql string parameter will result in no timeout being set\r\n```javascript\r\n        open(function(conn) {\r\n            var queryObj = {\r\n                query_str : \"waitfor delay \\'00:00:10\\';\",\r\n                query_timeout : 2\r\n            };\r\n\r\n            conn.query(queryObj, function (err, res) {\r\n                assert(err != null);\r\n                assert(err.message.indexOf('Query timeout expired') > 0)\r\n                test_done();\r\n            });\r\n        });\r\n```\r\nA timeout can also be used with a stored procedure call as follows :-\r\n```javascript\r\n        function go() {\r\n            var pm = c.procedureMgr();\r\n            pm.setTimeout(2);\r\n            pm.callproc(sp_name, ['0:0:5'], function(err, results, output) {\r\n                assert(err != null);\r\n                assert(err.message.indexOf('Query timeout expired') > 0)\r\n                test_done();\r\n            });\r\n        }\r\n```\r\n## User Binding Of Parameters\r\n\r\nIn many cases letting the driver decide on the parameter type is sufficient.  There are occasions however where more control is required. The API now includes some methods which explicitly set the type alongside the value.  The driver will in this case\r\nuse the type as provided.  For example, to set column type as binary and pass in null value, use the sql.VarBinary as shown below.  There are more examples in test harness file userbind.js.\r\n```javascript\r\n     sql.open(connStr, function(err, conn) {\r\n         conn.query(\"declare @bin binary(4) = ?; select @bin as bin\", [sql.VarBinary(null)], function (err, res) {\r\n             var expected = [ {\r\n                 'bin' : null\r\n             }];\r\n             assert.ifError(err);\r\n             assert.deepEqual(expected, res);\r\n         });\r\n     });\r\n```\r\n## Stored Procedure Support \r\n\r\nIncluded in this module is support for stored procedures in SQL server.  Simple input/output parameters and return value can be bound.  \r\n\r\nopen a connection, and get an instance of procedureMgr\r\n```javascript\r\n        sql.open(conn_str, function (err, conn) {\r\n                var pm = conn.procedureMgr();\r\n                pm.callproc('my_proc', [10], function(err, results, output) {\r\n            });\r\n        });\r\n```\r\nin above example a call is issued to the stored procedure my_proc which takes one input integer parameter.  results will contain rows selected within the procedure and output parameters are inserted into output vector.  Note the [0] element in output will be the return result of the procedure.  If no return exists in the procedure, this value will be 0.  Any further elements in the array will be output parameters populated by the execution of the procedure.\r\n\r\nNote the manager will issue a select to the database to obtain meta data about the procedure.  This is cached by the manager.  It is possible to obtain this information for inspection.\r\n```javascript\r\n    pm.describe(name, function (meta) {\r\n        console.log(JSON.stringify(meta));\r\n        pm.callproc('my_proc', [10], function (err, results, output) {\r\n        });\r\n    });\r\n```\r\nmeta will contain the parameter array associated with the procedure, the type, size and call signature required.  \r\n\r\nthe test folder includes some simple unit tests for stored procedures.  If you discover any problems with using this new feature please include a simple example, preferably a unit test illustrating the issue.  I will endeavour to fix the issue promptly.\r\n\r\nFurther enhancements will be made to the library over the coming months - please leave feedback or suggestions for required features.\r\n\r\n## Bulk Table Operations\r\n\r\nBulk insert/delete/modify is now supported through a helper class.  The underlying c++ driver will reserve vectors containing the column data and submit in bulk to the database which will reduce network overhead.  It is possible to configure in the java script a batch size which will break the master vector of objects down into batches each of which is prepared and sent by the driver. Most of the effort for this update was spent in getting the c++ driver to work, the js API still needs a little refinement, so please use the feature and make suggestions for improvements.\r\n\r\nIf issues are found, please provide the exact table definition being used and ideally a unit test illustrating the problem. \r\n\r\ntake a look at the unit test file bulk.js to get an idea of how to use these new functions.\r\n\r\nonce a connection is opened, first get the table manager :-\r\n```javascript\r\n            var tm = c.tableMgr();\r\n            tm.bind('Employee', cb);\r\n```\r\nthe table manager will fetch some meta data describing the table 'Employee' and make a callback providing a manager for that particular table :-\r\n```javascript\r\n            function cb(bulkMgr) {\r\n              // bulkMgr is now ready to accept bulk operations for table 'Employee'\r\n              // see employee.json and employee.sql in test.\r\n              var parsedJSON = getJSON(); // see bulk.js\r\n              bulkMgr.insertRows(parsedJSON, insertDone);\r\n            }\r\n```\r\nyou can look at the signatures, columns and other interesting information by asking for a summary :-\r\n```javascript\r\n             var summary = bulkMgr.getSummary();\r\n```\r\nby default the primary key of the table is assigned to the where condition for select which gives a convenient way of selecting a set of rows based on knowing the keys.  Note this operation is not yet optimized with bulk fetch, which will be enhanced in the next update addressing cursors.\r\n```javascript\r\n             keys = [];\r\n             keys.push(\r\n                 {\r\n                     BusinessEntityID : 1  \r\n                 }\r\n             );\r\n             bulkMgr.selectRows(keys, function(err, results) {\r\n                 // results will contain the full object i.e. all columns,\r\n             }\r\n             ); \r\n```\r\nit is possible to change the where clause by using a different column signature - for example, LoginID\r\n```javascript\r\n            var whereCols = [];\r\n            whereCols.push({\r\n                name : 'LoginID'\r\n            });\r\n            // as above keys now needs to contain a vector of LoginID\r\n            bulkMgr.setWhereCols(whereCols);\r\n            bulkMgr.selectRows(keys, bulkDone);\r\n ```\r\namends can be made to a sub set of columns, for example to bulk update the modified date, prepare a set of objects with the primary keys to satisfy the where clause and of course the column to be updated. By default all assignable columns are used for the update signature so the entire object would need to be presented.  Where performance is within acceptable limits, this is probably the easiest pattern i.e. select the entire object, amend as required and commit the amended vector back to the database.\r\n\r\n```javascript\r\n                var newDate = new Date(\"2015-01-01T00:00:00.000Z\");\r\n                var modifications = [];\r\n                parsedJSON.forEach(function(emp) {\r\n                    emp.ModifiedDate = newDate;\r\n                    modifications.push( {\r\n                        BusinessEntityID : emp.BusinessEntityID,\r\n                        ModifiedDate : newDate\r\n                    });\r\n                });\r\n```\r\ntell the bulkMgr which columns to use for the update and send in the modification :-\r\n```javascript\r\n                var updateCols = [];\r\n                updateCols.push({\r\n                    name : 'ModifiedDate'\r\n                });\r\n\r\n                bulkMgr.setUpdateCols(updateCols);\r\n                bulkMgr.updateRows(modifications, updateDone);\r\n```\r\nthe manager can also delete rows - the where clause is used in binding signature so by default this will be the primary key.  Similar to the select examples above :-\r\n```javascript\r\n                 bulkMgr.deleteRows(keys, function (err, res) {\r\n                 })\r\n```\r\nof course keys can be the original objects as fetched with select - the driver only needs all columns that satisfy the where condition of the signature.\r\n\r\n\r\nfinally, to reset the signatures the summary can help :-\r\n```javascript\r\n                 var summary = bulkMgr.getSummary();\r\n                 bulkMgr.setWhereCols(summary.primaryColumns);\r\n                 bulkMgr.setUpdateCols(summary.assignableColumns);\r\n```\r\n \r\nFurther enhancements will be made to the library over the coming months - please leave feedback or suggestions for required features.\r\n\r\n## Test\r\n\r\nIncluded are a few unit tests.  They require mocha, async, and assert to be \r\ninstalled via npm.  Also, set the variables in test-config.js, then run the \r\ntests as follows:\r\n```shell\r\n    cd test\r\n    node runtests.js\r\n```\r\nnote if you wish to run the code through an IDE such as PHPStorm, the following fragment may help :-\r\n```javascript\r\n    function runTest() {\r\n\r\n    var mocha = new Mocha(\r\n        {\r\n            ui : 'tdd'\r\n        });\r\n\r\n    -- change path as required to unit test file, set breakpoint and run via IDE\r\n    \r\n    mocha.addFile('node_modules/node-sqlserver-v8/test/query.js');\r\n\r\n    mocha.run(function (failures) {\r\n        process.on('exit', function () {\r\n            process.exit(failures);\r\n        });\r\n    });\r\n```\r\n\r\n## Known Issues\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/TimelordUK/node-sqlserver-v8.git"
  },
  "scripts": {
    "build": "call tool/build.bat",
    "test": "call tool/testonce.bat"
  },
  "typings": "./lib/index.d.ts",
  "version": "0.6.8"
}
